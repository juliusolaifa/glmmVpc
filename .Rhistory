mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=20)
pis
pr11(vv)
vv <- vpc(fits[[8]],0)
vv
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=20)
pis
vv
pr11(vv)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=20)
vpc_from_paramMat("tweedie", param, x=1)
unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(unlist(vpc_from_paramMat("tweedie", param, x=1)))
vv$vpc
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10000)
unlist(vpc_from_paramMat("tweedie", param, x=1))
vpc.sample <- unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(vpc.sample)
?quantile
quantile(vpc.sample, c(0.025,0.975))
vv$vpc
?pmvrnorm
?mvtnorm::pmvnorm
mu <- c(0, 0) # Mean vector
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2) # Covariance matrix
lower <- c(-1, -1) # Lower truncation bounds
upper <- c(1, 1)   # Upper truncation bounds
result <- mtmvnorm(mean = mu, sigma = Sigma, lower = lower, upper = upper)
truncated_mean <- result$tmean
truncated_variance <- result$tvar
truncated_mean
result <- mtmvnorm(mean = mu, sigma = Sigma, lower = lower, upper = upper)
truncated_mean <- result$tmean
truncated_variance
fits[[8]]
?mvtnorm
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
result <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
print(mean)
print(result$tmean)
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
result <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
print(mu)
print(result$tmean)
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
print(mu)
print(res$tmean)
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
print(Sig)
print(res$tvar)
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
dat.temp <- rtmvnorm(1,mean=res$tmean,sigma=res$tvar,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
dat.temp <- rtmvnorm(1,mean=res$tmean,sigma=res$tvar,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=10)
vpc.sample <- unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(vpc.sample, c(0.025,0.975))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=100)
vpc.sample <- unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(vpc.sample, c(0.025,0.975))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=1000)
vpc.sample <- unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(vpc.sample, c(0.025,0.975))
dat
coef(fits[[8]])
fits[[8]]["b1"]
fits[[8]][,"b1"]
coef(fits[[8]])["b1"]
mu <- coef(fits[[8]])
mu["b1"]
mu["b1"] <- 0
mu
qmixtnorm <- function(mean, Sigma, pis,n=10) {
rng <- runif(n)
pis <- cumsum(pis)
result <- matrix(NA,nrow=n, ncol = length(mean))
for(i in 1:n) {
if(rng[i] <= pis[1]) {
mu <- mean
Sig <- Sigma
dat <- mvtnorm::rmvnorm(1,mean=mu,sigma = Sig)
}
else if(rng[i] > pis[1] && rng[i] <= pis[2]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig11"]
lower <- ifelse(names(mu) %in% "sig22", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig11", !colnames(Sig) %in% "sig11"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
dat.temp <- rtmvnorm(1,mean=res$tmean,sigma=res$tvar,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
dat["sig12"] <- 0
}
else if(rng[i] > pis[2] && rng[i] <= pis[3]) {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% "sig22"]
lower <- ifelse(names(mu) %in% "sig11", 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% "sig22", !colnames(Sig) %in% "sig22"]
res <- mtmvnorm(mean = mu, sigma = Sig, lower = lower)
dat.temp <- rtmvnorm(1,mean=res$tmean,sigma=res$tvar,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
dat["sig12"] <- 0
}
else {
mu <- mean
Sig <- Sigma
mu <- mu[!names(mu) %in% c("sig11","sig22")]
lower <- ifelse(names(mu) %in% c("sig11","sig22"), 0, -Inf)
Sig <- Sig[!rownames(Sig) %in% c("sig11","sig22"),
!colnames(Sig) %in% c("sig11","sig22")]
dat.temp <- rtmvnorm(1,mean=mu,sigma=Sig,lower=lower)
dat <- numeric(length(mean))
names(dat) <- names(mean)
dat[names(mu)] <- dat.temp
}
result[i,] <- dat
}
colnames(result) <- names(mean)
return(result)
}
quantile(vpc.sample, c(0.025,0.975))
muu <- coef(fits[[8]])
vcovv <- vcov(fits[[8]])
vv <- vpc(fits[[8]],1)
pis <- c(pr11(vv$modObj),0.25,0.25,1-pr11(vv))
param <- qmixtnorm(mean=muu, Sigma=vcovv, pis=pis,n=1000)
vpc.sample <- unlist(vpc_from_paramMat("tweedie", param, x=1))
quantile(vpc.sample, c(0.025,0.975))
confint(fits[[1]])
confint(fits[[1]]$modObj)
confint(vpc(fits[[1]]))
confint(vpc(fits[[1]],0))
test()
confint(vpc(fits[[8]],1))
confint(vpc(fits[[9]],1))
confint(vpc(fits,1))
vpc(fits[[9]])
vpc(fits[[9]],0)
vpc(fits[[9]],0)$modObj
vpc(fits[[9]],0)$modObj$fit$convergence
vpc(fits[[9]],0)$modObj$obj
vpc(fits[[9]],0)$modObj$fit$obj
vpc(fits[[9]],0)$modObj$fit
vpc(fits[[9]],0)$modObj
vpc(fits[[9]],0)
vpc(fits[[9]],0)$modObj$modObj$fit
if(vpc(fits[[9]],0)$modObj$modObj$fit$convergence) print(1)
if(!vpc(fits[[9]],0)$modObj$modObj$fit$convergence) print(1)
if(vpc(fits[[9]],0)$modObj$modObj$fit$convergence==1) print(1)
vpc(fits[[9]],0)$modObj$modObj$sdr
vpc(fits[[9]],0)$modObj$modObj$sdr$pdHess
c(NA,NA.NA)
c(NA,NA,NA)
test()
confint(vpc(fits,1))
confint(vpc(fits[[1]],1))
test()
confint(vpc(fits[[1]],1))
test()
confint(vpc(fits[[1]],1))
test()
confint(vpc(fits[[1]],1))
vv <- vpc(fits[[1]],1)
confint(vv)
confint.vpcObj <- function(vpcObj, alpha=0.05, type=c("classical","adjusted")) {
# modObj <- vpcObj$modObj$modObj
# if(modObj$fit$convergence || !modObj$sdr$pdHess) {
#   return(NA,NA,NA)
# }
# vpc.value <- vpcObj$vpc
# sample.size <- stats::nobs(modObj)
# grad.vpc <- gradients(vpcObj)
#
# vcov.fit <- stats::vcov(modObj)
# stderr.vpc <- sqrt((grad.vpc %*% vcov.fit %*% grad.vpc)/sample.size)
#
# crit.val <- stats::qnorm(1-alpha/2)
#
# lwb <- vpc.value - crit.val * stderr.vpc
# upb <- vpc.value + crit.val * stderr.vpc
# return(c( Lower = lwb,VPC = vpc.value, Upper = upb))
}
confint(vv)
rm(confint.vpcObj)
check()
check()
rm(confint.vpcObj)
confint(vv)
vv <- vpc(fits[[1]],1)
confint(vv)
vv
confint(vv)
vv$modObj
vcov(vv$modObj)
check()
confint(vv)
vv
vcov(vv)
vcov(vv$modObj)
test()
confint(vv)
class(vv$modObj)
vcov(vv)
vcov(vv$modObj)
install()
vcov(vv$modObj)
confint(vv)
